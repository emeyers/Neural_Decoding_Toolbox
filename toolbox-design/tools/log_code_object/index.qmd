---
title: log_code_object
---

<p class="ethan_opening_paragraph" style="padding-bottom: 0% !important;">This helper object saves information about the exact code that was run so that one has a record of how particular results were generated.  This object gives several different methods for saving code in different files/memory configurations. The results are in a structure that has the name and path of the file being recorded, the text in the body of the file, the time when the file was last modified and the time when the <tt>log_code_object</tt> recorded the file This method inherits from the handle class so all logged files are persistently kept in the <tt>logged_code_structure</tt> as new files are added.   


<h2 class="methods_and_properties">Methods</h2>
<p class="ethan_bold_method">log_code_obj = log_code_object</p>
<p class="ethan_method_explanation">The constructor</p>
<p class="ethan_bold_method">log_code_obj.log_current_file</p>
<p class="ethan_method_explanation">This method logs the file that the called this method.</p>
<p class="ethan_bold_method">log_code_obj.log_specfic_files(file_names)</p>
<p class="ethan_method_explanation">If file_name is a string, this method logs the file that is in <tt>file_names</tt>, or if <tt>files_names</tt> is a cell array of strings, this method logs all the files that are in the cell array.</p>
<p class="ethan_bold_method">log_code_obj.log_files_in_directory(directory_name, file_pattern) </p>
<p class="ethan_method_explanation">This method logs all the files in the directory <tt>directory_name</tt> that have the pattern listed in file_pattern.  For example, to log all the m-files in the current directory one would use the methods: <tt>log_code_obj.log_files_in_directory('./', '*.m')</tt> </p>
<p class="ethan_bold_method">log_functions_in_memory(log_code_obj, directory_name)</p>
<p class="ethan_method_explanation">This method logs all the functions that are in memory from a particular directory given in <tt>directory_name</tt>.  This is particularly useful if there are a large number of files in a given directory but you only want to save the ones that were used by your code (see examples below).</p>


To get the logged information one can call the following method (or just access the field <tt>logged_code_structure</tt>):

<p class="ethan_bold_method">logged_code_structure = log_code_obj.return_logged_code_structure </p>
<p class="ethan_method_explanation">The number of elements in <tt>logged_code_structure</tt> is equal to the number of files logged, and the structure has the following fields:  

</p><ol style="padding-left:2em">
<li class="ethan_method_explanation"><tt>.code_filenames</tt>
<p class="ethan_short_input_argument_explanation">The name of the file that has been recorded. </p></li>
<li class="ethan_method_explanation"><tt>.code_filepath</tt>
<p class="ethan_short_input_argument_explanation">The full path to the directory where the file has been recorded. </p></li>
<li class="ethan_method_explanation"><tt>.code_body</tt>
<p class="ethan_short_input_argument_explanation">The text that is in the file. </p></li>
<li class="ethan_method_explanation"><tt>.last_modified_time</tt>
<p class="ethan_short_input_argument_explanation">The time when the file was last modified. </p></li>
<li class="ethan_method_explanation"><tt>.logged_time</tt>
<p class="ethan_short_input_argument_explanation">The time the file was logged (useful in case the file was changed after being logged). </p></li>
<h2 class="methods_and_properties">Example</h2>

We recommend calling the method <tt>log_code_obj.log_current_file</tt> in the beginning of any code you have the specifies what decoding object/parameters are used in a data analysis (that way if you change the code while the decoding analysis is running the original parameters will be recorded). If one wants to log which functions in the Neural Decoding Toolbox were used, one can then call the  <tt>log_code_obj.log_functions_in_memory(path_to_toolbox)</tt> method to save all the functions that were used. For example:

```matlab
% start of decoding scripts

log_code_obj = log_code_object; 
log_code_obj.log_current_file;   % log the script that is currently being run
          
% create the decoding objects, run the decoding analysis with DECODING_RESULTS = cv.run_cv_decoding;
  
log_code_obj.log_functions_in_memory(path_to_toolbox);  % log the functions that were used in the NDT

decoding_code_log = log_code_obj.logged_code_structure;
save('my_results', 'DECODING_RESULTS', 'decoding_code_log');
      
`</pre>         
```
